{"version":3,"file":"micro-fetch.js","sources":["../src/index.ts"],"sourcesContent":["export type MFRewriteFetchOptions = Omit<RequestInit, 'method' | 'body'>\n\nexport interface MFOptions {\n  baseUrl: string\n  fetchOptions?: MFRewriteFetchOptions\n}\n\nconst DEFAULT_HEADERS = {\n  'Content-Type': 'application/json'\n}\n\nconst DEFAULT_CREDENTIALS = 'include'\n\nconst execute = (url: string, options: RequestInit) => {\n  try {\n    return fetch(url, {\n      ...options\n    })\n  } catch (err) {\n    throw new Error(err.message)\n  }\n}\n\nconst http = (method: string, path: string, options: RequestInit) =>\n  execute(path, {\n    method,\n    ...options\n  })\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const microFetch = ({baseUrl, fetchOptions = {}}: MFOptions) => {\n  const options: RequestInit = {\n    credentials: DEFAULT_CREDENTIALS,\n    headers: {\n      ...DEFAULT_HEADERS\n    },\n    ...fetchOptions\n  }\n\n  const url = (path: string): string => {\n    // eslint-disable-next-line no-magic-numbers\n    const pathname = path[0] === '/' ? path.substr(1) : path\n    // eslint-disable-next-line no-magic-numbers\n    const basePath = baseUrl.substr(-1) === '/' ? baseUrl : `${baseUrl}/`\n\n    return basePath + pathname\n  }\n\n  const get = (path: string, rewriteOptions: MFRewriteFetchOptions = {}) =>\n    http('GET', url(path), {\n      ...options,\n      ...rewriteOptions\n    })\n\n  const post = (path: string, body: BodyInit, rewriteOptions: MFRewriteFetchOptions = {}) =>\n    http('POST', url(path), {\n      body,\n      ...options,\n      ...rewriteOptions\n    })\n\n  const put = (path: string, body: BodyInit, rewriteOptions: MFRewriteFetchOptions = {}) =>\n    http('PUT', url(path), {\n      body,\n      ...options,\n      ...rewriteOptions\n    })\n\n  const remove = (path: string, rewriteOptions: MFRewriteFetchOptions = {}) =>\n    http('DELETE', url(path), {\n      ...options,\n      ...rewriteOptions\n    })\n\n  const patch = (path: string, body: BodyInit, rewriteOptions: MFRewriteFetchOptions = {}) =>\n    http('PATCH', url(path), {\n      body,\n      ...options,\n      ...rewriteOptions\n    })\n\n  return {\n    get,\n    patch,\n    post,\n    put,\n    remove\n  }\n}\n"],"names":[],"mappings":";;;;AAOA,MAAM,kBAAkB;AAAA,EACtB,gBAAgB;AAAA;AAGlB,MAAM,sBAAsB;AAE5B,MAAM,UAAU,CAAC,KAAa,YAAyB;AACrD,MAAI;AACF,WAAO,MAAM,KAAK;AAAA,SACb;AAAA;AAAA,WAEE,KAAP;AACA,UAAM,IAAI,MAAM,IAAI;AAAA;AAAA;AAIxB,MAAM,OAAO,CAAC,QAAgB,MAAc,YAC1C,QAAQ,MAAM;AAAA,EACZ;AAAA,KACG;AAAA;MAIM,aAAa,CAAC,CAAC,SAAS,eAAe,QAAmB;AACrE,QAAM,UAAuB;AAAA,IAC3B,aAAa;AAAA,IACb,SAAS;AAAA,SACJ;AAAA;AAAA,OAEF;AAAA;AAGL,QAAM,MAAM,CAAC,SAAyB;AAEpC,UAAM,WAAW,KAAK,OAAO,MAAM,KAAK,OAAO,KAAK;AAEpD,UAAM,WAAW,QAAQ,OAAO,QAAQ,MAAM,UAAU,GAAG;AAE3D,WAAO,WAAW;AAAA;AAGpB,QAAM,MAAM,CAAC,MAAc,iBAAwC,OACjE,KAAK,OAAO,IAAI,OAAO;AAAA,OAClB;AAAA,OACA;AAAA;AAGP,QAAM,OAAO,CAAC,MAAc,MAAgB,iBAAwC,OAClF,KAAK,QAAQ,IAAI,OAAO;AAAA,IACtB;AAAA,OACG;AAAA,OACA;AAAA;AAGP,QAAM,MAAM,CAAC,MAAc,MAAgB,iBAAwC,OACjF,KAAK,OAAO,IAAI,OAAO;AAAA,IACrB;AAAA,OACG;AAAA,OACA;AAAA;AAGP,QAAM,SAAS,CAAC,MAAc,iBAAwC,OACpE,KAAK,UAAU,IAAI,OAAO;AAAA,OACrB;AAAA,OACA;AAAA;AAGP,QAAM,QAAQ,CAAC,MAAc,MAAgB,iBAAwC,OACnF,KAAK,SAAS,IAAI,OAAO;AAAA,IACvB;AAAA,OACG;AAAA,OACA;AAAA;AAGP,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA;;;;"}